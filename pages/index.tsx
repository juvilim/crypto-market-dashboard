import type { NextPage } from "next";
import Head from "next/head";
import React from "react";
import Pagination from "../components/Pagination";
import SearchBar from "../components/SearchBar";
import Table, { SortingRule } from "../components/Table";
import { DEFAULT_PAGE, DEFAULT_PAGE_SIZE, SortOrder, TAGS } from "../constants";
import { CryptoCurrencyAsset, useAssets } from "../hooks/useAssets";
import { hasKeyword } from "../utils";

const DEFAULT_KEYWORD = "";
const DEFAULT_TAG = TAGS[0].tag;

const Home: NextPage = () => {
  const [keyword, setKeyword] = React.useState<string>(DEFAULT_KEYWORD);
  const [page, setPage] = React.useState(DEFAULT_PAGE);
  const [sort, setSort] = React.useState<SortingRule | undefined>(undefined);
  const [selectedTag, setSelectedTag] = React.useState(DEFAULT_TAG);

  const {
    isLoading: isLoadingAsset,
    data: assets,
    error: errorAsset,
  } = useAssets({ keyword, selectedTag, sort });

  const sanitizedData = React.useMemo(() => {
    return assets?.data.map((item) => {
      const { id, assetCode, assetName, logoUrl, fullLogoUrl, tags } = item;
      return {
        id,
        assetCode,
        assetName,
        logoUrl,
        fullLogoUrl,
        tags,
      } as CryptoCurrencyAsset;
    });
  }, [assets]);

  const sortedData = sanitizedData?.slice();
  sortedData?.sort((a: any, b: any) => {
    if (!sort) return a.assetCode > b.assetCode ? 1 : -1;

    const columnName = sort.sortBy;
    if (sort.order === SortOrder.ASC) {
      return a[columnName] > b[columnName] ? 1 : -1;
    } else if (sort.order === SortOrder.DESC) {
      return a[columnName] < b[columnName] ? 1 : -1;
    } else {
      return 0;
    }
  });

  const filteredData = sortedData?.filter((data) => {
    let bool = true;
    if (keyword && selectedTag !== DEFAULT_TAG) {
      bool =
        hasKeyword([data.assetCode, data.assetName], keyword) &&
        data.tags.some(
          (item) => item.toLowerCase() === selectedTag.toLowerCase()
        );
    } else if (keyword) {
      bool = hasKeyword([data.assetCode, data.assetName], keyword);
    } else if (selectedTag !== DEFAULT_TAG) {
      bool = data.tags.some(
        (item) => item.toLowerCase() === selectedTag.toLowerCase()
      );
    }
    return bool;
  });

  const tableData = React.useMemo(() => {
    if (!filteredData) return;

    const startIndex = (page - 1) * DEFAULT_PAGE_SIZE;
    const endIndex = startIndex + DEFAULT_PAGE_SIZE;
    return filteredData.slice(startIndex, endIndex);
  }, [filteredData, page]);

  const handleColumnHeaderClick = (selectedColumn: string) => () => {
    if (!sort || sort?.sortBy !== selectedColumn) {
      setSort({
        sortBy: selectedColumn,
        order: SortOrder.ASC,
      });
    } else if (sort.order === SortOrder.ASC) {
      setSort({
        sortBy: sort.sortBy,
        order: SortOrder.DESC,
      });
    } else {
      setSort(undefined);
    }
  };

  const renderResult = () => {
    if (isLoadingAsset) {
      return <div>Loading...</div>;
    }
    if (errorAsset) {
      return <div>{errorAsset as any}</div>;
    }

    const totalPage = Math.ceil(
      (filteredData?.length || 0) / DEFAULT_PAGE_SIZE
    );
    return (
      <>
        {/* <Table
          data={tableData}
          sort={sort}
          onColumnHeaderClick={handleColumnHeaderClick}
        /> */}
        {/* <Pagination page={page} setPage={setPage} totalPage={totalPage} /> */}
      </>
    );
  };

  console.log("data", keyword, assets, sortedData, filteredData, tableData);

  return (
    <div className="container max-w-6xl mx-auto">
      <Head>
        <title>Crypto Market Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <SearchBar value={keyword} setValue={setKeyword} />
      </div>
      <div className="flex space-x-4 w-full pb-4 text-gray-500 text-sm whitespace-nowrap overflow-scroll ">
        {TAGS.map(({ tag, display }) => (
          <div
            key={tag}
            className={`py-2 px-4 ${
              tag === selectedTag ? "text-gray-900 bg-gray-100 rounded-lg" : ""
            } cursor-pointer`}
            onClick={() => setSelectedTag(tag)}
          >
            {display}
          </div>
        ))}
      </div>
      <div>{renderResult()}</div>
    </div>
  );
};

export default Home;
